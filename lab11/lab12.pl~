even(X):-X1 is X mod 2, X1==0.
gcd(X,Y,G) :- X=Y, G=X.
gcd(X,Y,G) :- X<Y, Y1 is Y-X, gcd(X,Y1,G).
gcd(X,Y,G) :- X>Y ,gcd(Y,X,G).
trygñd(X,Y):-gcd(X,Y,Res), Res==1.
non(X):-X\=0.
countEvenUp(Num,Res):-countEvenUp(Num,Num,Res),!.
countEvenUp(_,0,0):-!.
countEvenUp(Num,CurNum,Res):-
    nNum is CurNum-1, countEvenUp(Num,nNum,NewRes),
    (trygcd(nNum,Num)==true,even(nNum), Res is NewRes+1; Res is NewRes).
g_c_d(X,Y,Res):-
    X1 is X mod Y,
    Y1 is Y mod X,
    (X1 == 0 ,!, Res is Y;
    Y1 ==0,!,Res is X;
    X>Y, g_c_d(X1,Y,Res);
    g_c_d(X,Y1,Res)).
sumDelUp(X,Sum):-sumDelUp(X,X,Sum),!.
sumDelUp(_,0,0):-!.
sumDelUp(X,Del,Sum):-D1 is Del-1, sumDelUp(X,D1,NewSum),
    (non(D1),even(D1),g_c_d(D1,X,Res),1 is Res, Sum is NewSum+1; Sum is NewSum).
